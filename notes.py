import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import schedule
import time
import threading
from datetime import datetime

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ALLOWED_USERS = {123456789}  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
def is_allowed(update: Update):
    return update.message.from_user.id in ALLOWED_USERS

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–µ–Ω—é
def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ['üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É', 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏'],
        ['‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'],
        ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É', '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'],
        ['üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
    ], resize_keyboard=True)

# –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: CallbackContext):
    if not is_allowed(update):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    welcome_text = (
        "üåü –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üìù –î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
        "üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏\n"
        "‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üóëÔ∏è –£–¥–∞–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏\n"
        "‚ùå –£–¥–∞–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "üìÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: CallbackContext):
    if not is_allowed(update):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    text = update.message.text

    if text == 'üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:")
        context.user_data['awaiting_note'] = True
    elif text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏':
        await view_notes(update, context)
    elif text == '‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç")
        context.user_data['awaiting_reminder'] = True
    elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        context.user_data['awaiting_note_delete'] = True
    elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏ –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç")
        context.user_data['awaiting_note_edit'] = True
    elif text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        context.user_data['awaiting_reminder_delete'] = True
    elif text == 'üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        await view_reminders(update, context)
    elif context.user_data.get('awaiting_note'):
        await add_note(update, context)
        context.user_data['awaiting_note'] = False
    elif context.user_data.get('awaiting_reminder'):
        await set_reminder(update, context)
        context.user_data['awaiting_reminder'] = False
    elif context.user_data.get('awaiting_note_delete'):
        await delete_note(update, context)
        context.user_data['awaiting_note_delete'] = False
    elif context.user_data.get('awaiting_note_edit'):
        await edit_note(update, context)
        context.user_data['awaiting_note_edit'] = False
    elif context.user_data.get('awaiting_reminder_delete'):
        await delete_reminder(update, context)
        context.user_data['awaiting_reminder_delete'] = False
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def add_note(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    note = update.message.text.strip()
    if user_id not in context.user_data:
        context.user_data[user_id] = {'notes': [], 'reminders': []}
    context.user_data[user_id]['notes'].append(note)
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫
async def view_notes(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in context.user_data and context.user_data[user_id]['notes']:
        notes = "\n".join([f"{i+1}. {note}" for i, note in enumerate(context.user_data[user_id]['notes'])])
        await update.message.reply_text(f"üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n{notes}", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.", reply_markup=get_main_keyboard())

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def delete_note(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        note_index = int(update.message.text.strip()) - 1
        if user_id in context.user_data and 0 <= note_index < len(context.user_data[user_id]['notes']):
            deleted_note = context.user_data[user_id]['notes'].pop(note_index)
            await update.message.reply_text(f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_note}", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.", reply_markup=get_main_keyboard())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.", reply_markup=get_main_keyboard())

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
async def edit_note(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        parts = update.message.text.strip().split(maxsplit=1)
        note_index = int(parts[0]) - 1
        new_text = parts[1]
        if user_id in context.user_data and 0 <= note_index < len(context.user_data[user_id]['notes']):
            context.user_data[user_id]['notes'][note_index] = new_text
            await update.message.reply_text(f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {new_text}", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏.", reply_markup=get_main_keyboard())
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.", reply_markup=get_main_keyboard())

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def set_reminder(update: Update, context: CallbackContext):
    try:
        parts = update.message.text.strip().split(maxsplit=2)
        date_str, time_str, reminder_text = parts[0], parts[1], parts[2]
        reminder_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        now = datetime.now()

        if reminder_datetime < now:
            await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=get_main_keyboard())
            return

        delay = (reminder_datetime - now).total_seconds()
        threading.Timer(delay, lambda: context.bot.send_message(update.message.chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}")).start()

        if 'reminders' not in context.user_data[update.message.from_user.id]:
            context.user_data[update.message.from_user.id]['reminders'] = []
        context.user_data[update.message.from_user.id]['reminders'].append(f"{date_str} {time_str}: {reminder_text}")

        await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {date_str} {time_str}.", reply_markup=get_main_keyboard())
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", reply_markup=get_main_keyboard())

# –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def view_reminders(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id in context.user_data and 'reminders' in context.user_data[user_id] and context.user_data[user_id]['reminders']:
        reminders = "\n".join([f"{i+1}. {reminder}" for i, reminder in enumerate(context.user_data[user_id]['reminders'])])
        await update.message.reply_text(f"üìÖ –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{reminders}", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.", reply_markup=get_main_keyboard())

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def delete_reminder(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    try:
        reminder_index = int(update.message.text.strip()) - 1
        if user_id in context.user_data and 'reminders' in context.user_data[user_id] and 0 <= reminder_index < len(context.user_data[user_id]['reminders']):
            deleted_reminder = context.user_data[user_id]['reminders'].pop(reminder_index)
            await update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {deleted_reminder}", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=get_main_keyboard())
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.", reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    application = Application.builder().token("YOUR_TELEGRAM_BOT_TOKEN").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_scheduler, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()